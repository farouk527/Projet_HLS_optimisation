-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul_accel_core is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixmul_accel_core is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_accel_core_matrixmul_accel_core,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.440750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=35115,HLS_SYN_LUT=43453,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_154 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_165 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_176 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten6_reg_187 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_198 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_30_reg_209 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten13_reg_220 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_231 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_31_reg_242 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln14_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln14_1_fu_276_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln14_1_fu_302_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln14_1_reg_560 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln18_fu_326_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln18_reg_565 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_fu_349_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln24_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_580 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln24_1_fu_370_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln24_1_fu_396_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln24_1_reg_589 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_fu_420_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_reg_594 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln25_fu_445_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln41_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_609 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state11_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln41_reg_609_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_1_fu_466_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln41_fu_484_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln41_reg_618 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln41_1_fu_492_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln41_1_reg_623 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln45_fu_500_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln45_reg_628 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln45_reg_628_pp2_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln46_fu_504_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln46_reg_634 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln46_reg_634_pp2_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln42_fu_508_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_matrixmul_fu_258_ap_ready : STD_LOGIC;
    signal grp_matrixmul_fu_258_ap_done : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal mat_a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mat_a_ce0 : STD_LOGIC;
    signal mat_a_we0 : STD_LOGIC;
    signal mat_a_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mat_a_ce1 : STD_LOGIC;
    signal mat_a_we1 : STD_LOGIC;
    signal mat_a_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_b_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mat_b_ce0 : STD_LOGIC;
    signal mat_b_we0 : STD_LOGIC;
    signal mat_b_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_b_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mat_b_ce1 : STD_LOGIC;
    signal mat_b_we1 : STD_LOGIC;
    signal mat_b_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_res_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mat_res_ce0 : STD_LOGIC;
    signal mat_res_we0 : STD_LOGIC;
    signal mat_res_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inversion_matrix_fu_253_ap_start : STD_LOGIC;
    signal grp_inversion_matrix_fu_253_ap_done : STD_LOGIC;
    signal grp_inversion_matrix_fu_253_ap_idle : STD_LOGIC;
    signal grp_inversion_matrix_fu_253_ap_ready : STD_LOGIC;
    signal grp_inversion_matrix_fu_253_A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_inversion_matrix_fu_253_A_ce0 : STD_LOGIC;
    signal grp_inversion_matrix_fu_253_A_we0 : STD_LOGIC;
    signal grp_inversion_matrix_fu_253_A_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inversion_matrix_fu_253_A_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_inversion_matrix_fu_253_A_ce1 : STD_LOGIC;
    signal grp_inversion_matrix_fu_253_A_we1 : STD_LOGIC;
    signal grp_inversion_matrix_fu_253_A_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixmul_fu_258_ap_start : STD_LOGIC;
    signal grp_matrixmul_fu_258_ap_idle : STD_LOGIC;
    signal grp_matrixmul_fu_258_a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matrixmul_fu_258_a_ce0 : STD_LOGIC;
    signal grp_matrixmul_fu_258_a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matrixmul_fu_258_a_ce1 : STD_LOGIC;
    signal grp_matrixmul_fu_258_b_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matrixmul_fu_258_b_ce0 : STD_LOGIC;
    signal grp_matrixmul_fu_258_b_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matrixmul_fu_258_b_ce1 : STD_LOGIC;
    signal grp_matrixmul_fu_258_res_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matrixmul_fu_258_res_ce0 : STD_LOGIC;
    signal grp_matrixmul_fu_258_res_we0 : STD_LOGIC;
    signal grp_matrixmul_fu_258_res_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transMatrix_fu_265_ap_start : STD_LOGIC;
    signal grp_transMatrix_fu_265_ap_done : STD_LOGIC;
    signal grp_transMatrix_fu_265_ap_idle : STD_LOGIC;
    signal grp_transMatrix_fu_265_ap_ready : STD_LOGIC;
    signal grp_transMatrix_fu_265_mat_b_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_transMatrix_fu_265_mat_b_ce0 : STD_LOGIC;
    signal grp_transMatrix_fu_265_mat_b_we0 : STD_LOGIC;
    signal grp_transMatrix_fu_265_mat_b_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transMatrix_fu_265_mat_b_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_transMatrix_fu_265_mat_b_ce1 : STD_LOGIC;
    signal grp_transMatrix_fu_265_mat_b_we1 : STD_LOGIC;
    signal grp_transMatrix_fu_265_mat_b_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_phi_fu_169_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_1_phi_fu_202_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_2_phi_fu_235_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal grp_inversion_matrix_fu_253_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_matrixmul_fu_258_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_transMatrix_fu_265_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln538_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_1_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln538_1_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln324_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln18_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln15_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_282_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln18_fu_310_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln14_fu_294_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln18_fu_322_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_314_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln17_fu_332_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln_fu_336_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln25_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_376_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln28_fu_404_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_fu_388_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_fu_416_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_73_cast_fu_408_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln27_fu_426_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln_fu_430_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln42_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_fu_472_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln45_fu_521_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_74_cast_fu_514_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln45_fu_524_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1_fu_540_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component matrixmul_accel_core_inversion_matrix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_we0 : OUT STD_LOGIC;
        A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_accel_core_matrixmul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_ce1 : OUT STD_LOGIC;
        b_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        res_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_accel_core_transMatrix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mat_b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        mat_b_ce0 : OUT STD_LOGIC;
        mat_b_we0 : OUT STD_LOGIC;
        mat_b_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        mat_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_b_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        mat_b_ce1 : OUT STD_LOGIC;
        mat_b_we1 : OUT STD_LOGIC;
        mat_b_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        mat_b_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_accel_core_inversion_matrix_Ainverse IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_accel_core_mat_res IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mat_a_U : component matrixmul_accel_core_inversion_matrix_Ainverse
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_a_address0,
        ce0 => mat_a_ce0,
        we0 => mat_a_we0,
        d0 => mat_a_d0,
        q0 => mat_a_q0,
        address1 => mat_a_address1,
        ce1 => mat_a_ce1,
        we1 => mat_a_we1,
        d1 => grp_inversion_matrix_fu_253_A_d1,
        q1 => mat_a_q1);

    mat_b_U : component matrixmul_accel_core_inversion_matrix_Ainverse
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_b_address0,
        ce0 => mat_b_ce0,
        we0 => mat_b_we0,
        d0 => mat_b_d0,
        q0 => mat_b_q0,
        address1 => mat_b_address1,
        ce1 => mat_b_ce1,
        we1 => mat_b_we1,
        d1 => grp_transMatrix_fu_265_mat_b_d1,
        q1 => mat_b_q1);

    mat_res_U : component matrixmul_accel_core_mat_res
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_res_address0,
        ce0 => mat_res_ce0,
        we0 => mat_res_we0,
        d0 => grp_matrixmul_fu_258_res_d0,
        q0 => mat_res_q0);

    grp_inversion_matrix_fu_253 : component matrixmul_accel_core_inversion_matrix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inversion_matrix_fu_253_ap_start,
        ap_done => grp_inversion_matrix_fu_253_ap_done,
        ap_idle => grp_inversion_matrix_fu_253_ap_idle,
        ap_ready => grp_inversion_matrix_fu_253_ap_ready,
        A_address0 => grp_inversion_matrix_fu_253_A_address0,
        A_ce0 => grp_inversion_matrix_fu_253_A_ce0,
        A_we0 => grp_inversion_matrix_fu_253_A_we0,
        A_d0 => grp_inversion_matrix_fu_253_A_d0,
        A_q0 => mat_a_q0,
        A_address1 => grp_inversion_matrix_fu_253_A_address1,
        A_ce1 => grp_inversion_matrix_fu_253_A_ce1,
        A_we1 => grp_inversion_matrix_fu_253_A_we1,
        A_d1 => grp_inversion_matrix_fu_253_A_d1,
        A_q1 => mat_a_q1);

    grp_matrixmul_fu_258 : component matrixmul_accel_core_matrixmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixmul_fu_258_ap_start,
        ap_done => grp_matrixmul_fu_258_ap_done,
        ap_idle => grp_matrixmul_fu_258_ap_idle,
        ap_ready => grp_matrixmul_fu_258_ap_ready,
        a_address0 => grp_matrixmul_fu_258_a_address0,
        a_ce0 => grp_matrixmul_fu_258_a_ce0,
        a_q0 => mat_a_q0,
        a_address1 => grp_matrixmul_fu_258_a_address1,
        a_ce1 => grp_matrixmul_fu_258_a_ce1,
        a_q1 => mat_a_q1,
        b_address0 => grp_matrixmul_fu_258_b_address0,
        b_ce0 => grp_matrixmul_fu_258_b_ce0,
        b_q0 => mat_b_q0,
        b_address1 => grp_matrixmul_fu_258_b_address1,
        b_ce1 => grp_matrixmul_fu_258_b_ce1,
        b_q1 => mat_b_q1,
        res_address0 => grp_matrixmul_fu_258_res_address0,
        res_ce0 => grp_matrixmul_fu_258_res_ce0,
        res_we0 => grp_matrixmul_fu_258_res_we0,
        res_d0 => grp_matrixmul_fu_258_res_d0);

    grp_transMatrix_fu_265 : component matrixmul_accel_core_transMatrix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_transMatrix_fu_265_ap_start,
        ap_done => grp_transMatrix_fu_265_ap_done,
        ap_idle => grp_transMatrix_fu_265_ap_idle,
        ap_ready => grp_transMatrix_fu_265_ap_ready,
        mat_b_address0 => grp_transMatrix_fu_265_mat_b_address0,
        mat_b_ce0 => grp_transMatrix_fu_265_mat_b_ce0,
        mat_b_we0 => grp_transMatrix_fu_265_mat_b_we0,
        mat_b_d0 => grp_transMatrix_fu_265_mat_b_d0,
        mat_b_q0 => mat_b_q0,
        mat_b_address1 => grp_transMatrix_fu_265_mat_b_address1,
        mat_b_ce1 => grp_transMatrix_fu_265_mat_b_ce1,
        mat_b_we1 => grp_transMatrix_fu_265_mat_b_we1,
        mat_b_d1 => grp_transMatrix_fu_265_mat_b_d1,
        mat_b_q1 => mat_b_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((grp_matrixmul_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((grp_matrixmul_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_inversion_matrix_fu_253_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inversion_matrix_fu_253_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_inversion_matrix_fu_253_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_inversion_matrix_fu_253_ap_ready = ap_const_logic_1)) then 
                    grp_inversion_matrix_fu_253_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrixmul_fu_258_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrixmul_fu_258_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_matrixmul_fu_258_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrixmul_fu_258_ap_ready = ap_const_logic_1)) then 
                    grp_matrixmul_fu_258_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_transMatrix_fu_265_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_transMatrix_fu_265_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_transMatrix_fu_265_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_transMatrix_fu_265_ap_ready = ap_const_logic_1)) then 
                    grp_transMatrix_fu_265_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_1_reg_198 <= ap_const_lv6_0;
            elsif (((icmp_ln24_reg_580 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                i_1_reg_198 <= select_ln24_1_reg_589;
            end if; 
        end if;
    end process;

    i_2_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_reg_609 = ap_const_lv1_0))) then 
                i_2_reg_231 <= select_ln41_1_reg_623;
            elsif (((grp_matrixmul_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_2_reg_231 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_165 <= select_ln14_1_reg_560;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_165 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln41_fu_460_p2 = ap_const_lv1_0))) then 
                indvar_flatten13_reg_220 <= add_ln41_1_fu_466_p2;
            elsif (((grp_matrixmul_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                indvar_flatten13_reg_220 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten6_reg_187 <= ap_const_lv11_0;
            elsif (((icmp_ln24_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten6_reg_187 <= add_ln24_1_fu_370_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_154 <= add_ln14_1_fu_276_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_154 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_30_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_30_reg_209 <= ap_const_lv6_0;
            elsif (((icmp_ln24_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                j_30_reg_209 <= add_ln25_fu_445_p2;
            end if; 
        end if;
    end process;

    j_31_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln41_fu_460_p2 = ap_const_lv1_0))) then 
                j_31_reg_242 <= add_ln42_fu_508_p2;
            elsif (((grp_matrixmul_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j_31_reg_242 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_176 <= add_ln15_fu_349_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_176 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln18_reg_565 <= add_ln18_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln28_reg_594 <= add_ln28_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln14_reg_551 <= icmp_ln14_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln24_reg_580 <= icmp_ln24_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln41_reg_609 <= icmp_ln41_fu_460_p2;
                icmp_ln41_reg_609_pp2_iter1_reg <= icmp_ln41_reg_609;
                trunc_ln45_reg_628_pp2_iter1_reg <= trunc_ln45_reg_628;
                trunc_ln46_reg_634_pp2_iter1_reg <= trunc_ln46_reg_634;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln14_1_reg_560 <= select_ln14_1_fu_302_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                select_ln24_1_reg_589 <= select_ln24_1_fu_396_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln41_fu_460_p2 = ap_const_lv1_0))) then
                select_ln41_1_reg_623 <= select_ln41_1_fu_492_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_fu_460_p2 = ap_const_lv1_0))) then
                select_ln41_reg_618 <= select_ln41_fu_484_p3;
                trunc_ln45_reg_628 <= trunc_ln45_fu_500_p1;
                trunc_ln46_reg_634 <= trunc_ln46_fu_504_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln14_fu_270_p2, ap_enable_reg_pp0_iter0, icmp_ln24_fu_364_p2, ap_enable_reg_pp1_iter0, icmp_ln41_fu_460_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_CS_fsm_state10, grp_matrixmul_fu_258_ap_done, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_CS_fsm_state8, ap_block_state8_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln14_fu_270_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln14_fu_270_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln24_fu_364_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln24_fu_364_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_matrixmul_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln41_fu_460_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln41_fu_460_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln14_1_fu_276_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_154) + unsigned(ap_const_lv11_1));
    add_ln14_fu_282_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_i_phi_fu_169_p4));
    add_ln15_fu_349_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln14_fu_294_p3));
    add_ln18_fu_326_p2 <= std_logic_vector(unsigned(zext_ln18_fu_322_p1) + unsigned(tmp_cast_fu_314_p3));
    add_ln1_fu_540_p3 <= (trunc_ln45_reg_628_pp2_iter1_reg & trunc_ln46_reg_634_pp2_iter1_reg);
    add_ln24_1_fu_370_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_187) + unsigned(ap_const_lv11_1));
    add_ln24_fu_376_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_i_1_phi_fu_202_p4));
    add_ln25_fu_445_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln24_fu_388_p3));
    add_ln28_fu_420_p2 <= std_logic_vector(unsigned(zext_ln28_fu_416_p1) + unsigned(tmp_73_cast_fu_408_p3));
    add_ln41_1_fu_466_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_220) + unsigned(ap_const_lv11_1));
    add_ln41_fu_472_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_i_2_phi_fu_235_p4));
    add_ln42_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln41_fu_484_p3));
    add_ln45_fu_524_p2 <= std_logic_vector(unsigned(zext_ln45_fu_521_p1) + unsigned(tmp_74_cast_fu_514_p3));
    add_ln_fu_336_p3 <= (trunc_ln18_fu_310_p1 & trunc_ln17_fu_332_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state14 <= ap_CS_fsm(9);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_on_subcall_done_assign_proc : process(grp_inversion_matrix_fu_253_ap_done, grp_transMatrix_fu_265_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_transMatrix_fu_265_ap_done = ap_const_logic_0) or (grp_inversion_matrix_fu_253_ap_done = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln14_fu_270_p2)
    begin
        if ((icmp_ln14_fu_270_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln24_fu_364_p2)
    begin
        if ((icmp_ln24_fu_364_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state11_assign_proc : process(icmp_ln41_fu_460_p2)
    begin
        if ((icmp_ln41_fu_460_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_202_p4_assign_proc : process(i_1_reg_198, icmp_ln24_reg_580, ap_CS_fsm_pp1_stage0, select_ln24_1_reg_589, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln24_reg_580 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_1_phi_fu_202_p4 <= select_ln24_1_reg_589;
        else 
            ap_phi_mux_i_1_phi_fu_202_p4 <= i_1_reg_198;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_235_p4_assign_proc : process(i_2_reg_231, icmp_ln41_reg_609, ap_CS_fsm_pp2_stage0, select_ln41_1_reg_623, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_reg_609 = ap_const_lv1_0))) then 
            ap_phi_mux_i_2_phi_fu_235_p4 <= select_ln41_1_reg_623;
        else 
            ap_phi_mux_i_2_phi_fu_235_p4 <= i_2_reg_231;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_169_p4_assign_proc : process(i_reg_165, icmp_ln14_reg_551, ap_CS_fsm_pp0_stage0, select_ln14_1_reg_560, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln14_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_169_p4 <= select_ln14_1_reg_560;
        else 
            ap_phi_mux_i_phi_fu_169_p4 <= i_reg_165;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln18_fu_359_p1 <= input_r_q0;
    bitcast_ln28_fu_455_p1 <= input_r_q0;
    grp_inversion_matrix_fu_253_ap_start <= grp_inversion_matrix_fu_253_ap_start_reg;
    grp_matrixmul_fu_258_ap_start <= grp_matrixmul_fu_258_ap_start_reg;
    grp_transMatrix_fu_265_ap_start <= grp_transMatrix_fu_265_ap_start_reg;
    icmp_ln14_fu_270_p2 <= "1" when (indvar_flatten_reg_154 = ap_const_lv11_400) else "0";
    icmp_ln15_fu_288_p2 <= "1" when (j_reg_176 = ap_const_lv6_20) else "0";
    icmp_ln24_fu_364_p2 <= "1" when (indvar_flatten6_reg_187 = ap_const_lv11_400) else "0";
    icmp_ln25_fu_382_p2 <= "1" when (j_30_reg_209 = ap_const_lv6_20) else "0";
    icmp_ln41_fu_460_p2 <= "1" when (indvar_flatten13_reg_220 = ap_const_lv11_400) else "0";
    icmp_ln42_fu_478_p2 <= "1" when (j_31_reg_242 = ap_const_lv6_20) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln538_fu_344_p1, zext_ln538_1_fu_440_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln538_1_fu_440_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln538_fu_344_p1(11 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_a_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state10, grp_inversion_matrix_fu_253_A_address0, grp_matrixmul_fu_258_a_address0, ap_block_pp0_stage0, ap_CS_fsm_state8, zext_ln18_1_fu_355_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            mat_a_address0 <= zext_ln18_1_fu_355_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_a_address0 <= grp_matrixmul_fu_258_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_a_address0 <= grp_inversion_matrix_fu_253_A_address0;
        else 
            mat_a_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mat_a_address1_assign_proc : process(ap_CS_fsm_state10, grp_inversion_matrix_fu_253_A_address1, grp_matrixmul_fu_258_a_address1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_a_address1 <= grp_matrixmul_fu_258_a_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_a_address1 <= grp_inversion_matrix_fu_253_A_address1;
        else 
            mat_a_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    mat_a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_state10, grp_inversion_matrix_fu_253_A_ce0, grp_matrixmul_fu_258_a_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            mat_a_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_a_ce0 <= grp_matrixmul_fu_258_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_a_ce0 <= grp_inversion_matrix_fu_253_A_ce0;
        else 
            mat_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_a_ce1_assign_proc : process(ap_CS_fsm_state10, grp_inversion_matrix_fu_253_A_ce1, grp_matrixmul_fu_258_a_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_a_ce1 <= grp_matrixmul_fu_258_a_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_a_ce1 <= grp_inversion_matrix_fu_253_A_ce1;
        else 
            mat_a_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mat_a_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_inversion_matrix_fu_253_A_d0, ap_block_pp0_stage0, ap_CS_fsm_state8, bitcast_ln18_fu_359_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            mat_a_d0 <= bitcast_ln18_fu_359_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_a_d0 <= grp_inversion_matrix_fu_253_A_d0;
        else 
            mat_a_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mat_a_we0_assign_proc : process(icmp_ln14_reg_551, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, grp_inversion_matrix_fu_253_A_we0, ap_CS_fsm_state8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            mat_a_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_a_we0 <= grp_inversion_matrix_fu_253_A_we0;
        else 
            mat_a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_a_we1_assign_proc : process(grp_inversion_matrix_fu_253_A_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_a_we1 <= grp_inversion_matrix_fu_253_A_we1;
        else 
            mat_a_we1 <= ap_const_logic_0;
        end if; 
    end process;


    mat_b_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state10, grp_matrixmul_fu_258_b_address0, grp_transMatrix_fu_265_mat_b_address0, ap_block_pp1_stage0, ap_CS_fsm_state8, zext_ln28_1_fu_451_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            mat_b_address0 <= zext_ln28_1_fu_451_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_b_address0 <= grp_transMatrix_fu_265_mat_b_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_b_address0 <= grp_matrixmul_fu_258_b_address0;
        else 
            mat_b_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mat_b_address1_assign_proc : process(ap_CS_fsm_state10, grp_matrixmul_fu_258_b_address1, grp_transMatrix_fu_265_mat_b_address1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_b_address1 <= grp_transMatrix_fu_265_mat_b_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_b_address1 <= grp_matrixmul_fu_258_b_address1;
        else 
            mat_b_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    mat_b_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state10, grp_matrixmul_fu_258_b_ce0, grp_transMatrix_fu_265_mat_b_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            mat_b_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_b_ce0 <= grp_transMatrix_fu_265_mat_b_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_b_ce0 <= grp_matrixmul_fu_258_b_ce0;
        else 
            mat_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_b_ce1_assign_proc : process(ap_CS_fsm_state10, grp_matrixmul_fu_258_b_ce1, grp_transMatrix_fu_265_mat_b_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_b_ce1 <= grp_transMatrix_fu_265_mat_b_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_b_ce1 <= grp_matrixmul_fu_258_b_ce1;
        else 
            mat_b_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mat_b_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, grp_transMatrix_fu_265_mat_b_d0, ap_block_pp1_stage0, ap_CS_fsm_state8, bitcast_ln28_fu_455_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            mat_b_d0 <= bitcast_ln28_fu_455_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_b_d0 <= grp_transMatrix_fu_265_mat_b_d0;
        else 
            mat_b_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mat_b_we0_assign_proc : process(icmp_ln24_reg_580, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, grp_transMatrix_fu_265_mat_b_we0, ap_CS_fsm_state8)
    begin
        if (((icmp_ln24_reg_580 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            mat_b_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_b_we0 <= grp_transMatrix_fu_265_mat_b_we0;
        else 
            mat_b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_b_we1_assign_proc : process(grp_transMatrix_fu_265_mat_b_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mat_b_we1 <= grp_transMatrix_fu_265_mat_b_we1;
        else 
            mat_b_we1 <= ap_const_logic_0;
        end if; 
    end process;


    mat_res_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_state10, ap_enable_reg_pp2_iter1, grp_matrixmul_fu_258_res_address0, ap_block_pp2_stage0, zext_ln45_1_fu_530_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            mat_res_address0 <= zext_ln45_1_fu_530_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_res_address0 <= grp_matrixmul_fu_258_res_address0;
        else 
            mat_res_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mat_res_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state10, ap_enable_reg_pp2_iter1, grp_matrixmul_fu_258_res_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            mat_res_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_res_ce0 <= grp_matrixmul_fu_258_res_ce0;
        else 
            mat_res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_res_we0_assign_proc : process(ap_CS_fsm_state10, grp_matrixmul_fu_258_res_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_res_we0 <= grp_matrixmul_fu_258_res_we0;
        else 
            mat_res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln_fu_430_p4 <= ((ap_const_lv1_1 & trunc_ln28_fu_404_p1) & trunc_ln27_fu_426_p1);
    output_r_address0 <= zext_ln324_fu_546_p1(10 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= mat_res_q0;

    output_r_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln41_reg_609_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln41_reg_609_pp2_iter1_reg = ap_const_lv1_0))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln14_1_fu_302_p3 <= 
        add_ln14_fu_282_p2 when (icmp_ln15_fu_288_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_169_p4;
    select_ln14_fu_294_p3 <= 
        ap_const_lv6_0 when (icmp_ln15_fu_288_p2(0) = '1') else 
        j_reg_176;
    select_ln24_1_fu_396_p3 <= 
        add_ln24_fu_376_p2 when (icmp_ln25_fu_382_p2(0) = '1') else 
        ap_phi_mux_i_1_phi_fu_202_p4;
    select_ln24_fu_388_p3 <= 
        ap_const_lv6_0 when (icmp_ln25_fu_382_p2(0) = '1') else 
        j_30_reg_209;
    select_ln41_1_fu_492_p3 <= 
        add_ln41_fu_472_p2 when (icmp_ln42_fu_478_p2(0) = '1') else 
        ap_phi_mux_i_2_phi_fu_235_p4;
    select_ln41_fu_484_p3 <= 
        ap_const_lv6_0 when (icmp_ln42_fu_478_p2(0) = '1') else 
        j_31_reg_242;
    tmp_73_cast_fu_408_p3 <= (trunc_ln28_fu_404_p1 & ap_const_lv5_0);
    tmp_74_cast_fu_514_p3 <= (trunc_ln45_reg_628 & ap_const_lv5_0);
    tmp_cast_fu_314_p3 <= (trunc_ln18_fu_310_p1 & ap_const_lv5_0);
    trunc_ln17_fu_332_p1 <= select_ln14_fu_294_p3(5 - 1 downto 0);
    trunc_ln18_fu_310_p1 <= select_ln14_1_fu_302_p3(5 - 1 downto 0);
    trunc_ln27_fu_426_p1 <= select_ln24_fu_388_p3(5 - 1 downto 0);
    trunc_ln28_fu_404_p1 <= select_ln24_1_fu_396_p3(5 - 1 downto 0);
    trunc_ln45_fu_500_p1 <= select_ln41_1_fu_492_p3(5 - 1 downto 0);
    trunc_ln46_fu_504_p1 <= select_ln41_fu_484_p3(5 - 1 downto 0);
    zext_ln18_1_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_reg_565),64));
    zext_ln18_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_294_p3),10));
    zext_ln28_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_reg_594),64));
    zext_ln28_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_fu_388_p3),10));
    zext_ln324_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1_fu_540_p3),64));
    zext_ln45_1_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_fu_524_p2),64));
    zext_ln45_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln41_reg_618),10));
    zext_ln538_1_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_430_p4),64));
    zext_ln538_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_336_p3),64));
end behav;
