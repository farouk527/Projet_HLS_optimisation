// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_accel_core_matrixmul_accel_core,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.440750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=35115,HLS_SYN_LUT=43453,HLS_VERSION=2020_1}" *)

module matrixmul_accel_core (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_state4 = 10'd4;
parameter    ap_ST_fsm_pp1_stage0 = 10'd8;
parameter    ap_ST_fsm_state7 = 10'd16;
parameter    ap_ST_fsm_state8 = 10'd32;
parameter    ap_ST_fsm_state9 = 10'd64;
parameter    ap_ST_fsm_state10 = 10'd128;
parameter    ap_ST_fsm_pp2_stage0 = 10'd256;
parameter    ap_ST_fsm_state14 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] input_r_address0;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten_reg_154;
reg   [5:0] i_reg_165;
reg   [5:0] j_reg_176;
reg   [10:0] indvar_flatten6_reg_187;
reg   [5:0] i_1_reg_198;
reg   [5:0] j_30_reg_209;
reg   [10:0] indvar_flatten13_reg_220;
reg   [5:0] i_2_reg_231;
reg   [5:0] j_31_reg_242;
wire   [0:0] icmp_ln14_fu_270_p2;
reg   [0:0] icmp_ln14_reg_551;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] add_ln14_1_fu_276_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] select_ln14_1_fu_302_p3;
reg   [5:0] select_ln14_1_reg_560;
wire   [9:0] add_ln18_fu_326_p2;
reg   [9:0] add_ln18_reg_565;
wire   [5:0] add_ln15_fu_349_p2;
wire   [0:0] icmp_ln24_fu_364_p2;
reg   [0:0] icmp_ln24_reg_580;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [10:0] add_ln24_1_fu_370_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [5:0] select_ln24_1_fu_396_p3;
reg   [5:0] select_ln24_1_reg_589;
wire   [9:0] add_ln28_fu_420_p2;
reg   [9:0] add_ln28_reg_594;
wire   [5:0] add_ln25_fu_445_p2;
wire   [0:0] icmp_ln41_fu_460_p2;
reg   [0:0] icmp_ln41_reg_609;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state11_pp2_stage0_iter0;
wire    ap_block_state12_pp2_stage0_iter1;
wire    ap_block_state13_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln41_reg_609_pp2_iter1_reg;
wire   [10:0] add_ln41_1_fu_466_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [5:0] select_ln41_fu_484_p3;
reg   [5:0] select_ln41_reg_618;
wire   [5:0] select_ln41_1_fu_492_p3;
reg   [5:0] select_ln41_1_reg_623;
wire   [4:0] trunc_ln45_fu_500_p1;
reg   [4:0] trunc_ln45_reg_628;
reg   [4:0] trunc_ln45_reg_628_pp2_iter1_reg;
wire   [4:0] trunc_ln46_fu_504_p1;
reg   [4:0] trunc_ln46_reg_634;
reg   [4:0] trunc_ln46_reg_634_pp2_iter1_reg;
wire   [5:0] add_ln42_fu_508_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state10;
wire    grp_matrixmul_fu_258_ap_ready;
wire    grp_matrixmul_fu_258_ap_done;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state11;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg   [9:0] mat_a_address0;
reg    mat_a_ce0;
reg    mat_a_we0;
reg   [31:0] mat_a_d0;
wire   [31:0] mat_a_q0;
reg   [9:0] mat_a_address1;
reg    mat_a_ce1;
reg    mat_a_we1;
wire   [31:0] mat_a_q1;
reg   [9:0] mat_b_address0;
reg    mat_b_ce0;
reg    mat_b_we0;
reg   [31:0] mat_b_d0;
wire   [31:0] mat_b_q0;
reg   [9:0] mat_b_address1;
reg    mat_b_ce1;
reg    mat_b_we1;
wire   [31:0] mat_b_q1;
reg   [9:0] mat_res_address0;
reg    mat_res_ce0;
reg    mat_res_we0;
wire   [31:0] mat_res_q0;
wire    grp_inversion_matrix_fu_253_ap_start;
wire    grp_inversion_matrix_fu_253_ap_done;
wire    grp_inversion_matrix_fu_253_ap_idle;
wire    grp_inversion_matrix_fu_253_ap_ready;
wire   [9:0] grp_inversion_matrix_fu_253_A_address0;
wire    grp_inversion_matrix_fu_253_A_ce0;
wire    grp_inversion_matrix_fu_253_A_we0;
wire   [31:0] grp_inversion_matrix_fu_253_A_d0;
wire   [9:0] grp_inversion_matrix_fu_253_A_address1;
wire    grp_inversion_matrix_fu_253_A_ce1;
wire    grp_inversion_matrix_fu_253_A_we1;
wire   [31:0] grp_inversion_matrix_fu_253_A_d1;
wire    grp_matrixmul_fu_258_ap_start;
wire    grp_matrixmul_fu_258_ap_idle;
wire   [9:0] grp_matrixmul_fu_258_a_address0;
wire    grp_matrixmul_fu_258_a_ce0;
wire   [9:0] grp_matrixmul_fu_258_a_address1;
wire    grp_matrixmul_fu_258_a_ce1;
wire   [9:0] grp_matrixmul_fu_258_b_address0;
wire    grp_matrixmul_fu_258_b_ce0;
wire   [9:0] grp_matrixmul_fu_258_b_address1;
wire    grp_matrixmul_fu_258_b_ce1;
wire   [9:0] grp_matrixmul_fu_258_res_address0;
wire    grp_matrixmul_fu_258_res_ce0;
wire    grp_matrixmul_fu_258_res_we0;
wire   [31:0] grp_matrixmul_fu_258_res_d0;
wire    grp_transMatrix_fu_265_ap_start;
wire    grp_transMatrix_fu_265_ap_done;
wire    grp_transMatrix_fu_265_ap_idle;
wire    grp_transMatrix_fu_265_ap_ready;
wire   [9:0] grp_transMatrix_fu_265_mat_b_address0;
wire    grp_transMatrix_fu_265_mat_b_ce0;
wire    grp_transMatrix_fu_265_mat_b_we0;
wire   [31:0] grp_transMatrix_fu_265_mat_b_d0;
wire   [9:0] grp_transMatrix_fu_265_mat_b_address1;
wire    grp_transMatrix_fu_265_mat_b_ce1;
wire    grp_transMatrix_fu_265_mat_b_we1;
wire   [31:0] grp_transMatrix_fu_265_mat_b_d1;
reg   [5:0] ap_phi_mux_i_phi_fu_169_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_i_1_phi_fu_202_p4;
wire    ap_block_pp1_stage0;
reg   [5:0] ap_phi_mux_i_2_phi_fu_235_p4;
wire    ap_block_pp2_stage0;
reg    grp_inversion_matrix_fu_253_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    grp_matrixmul_fu_258_ap_start_reg;
wire    ap_CS_fsm_state9;
reg    grp_transMatrix_fu_265_ap_start_reg;
wire   [63:0] zext_ln538_fu_344_p1;
wire   [63:0] zext_ln18_1_fu_355_p1;
wire   [63:0] zext_ln538_1_fu_440_p1;
wire   [63:0] zext_ln28_1_fu_451_p1;
wire   [63:0] zext_ln45_1_fu_530_p1;
wire   [63:0] zext_ln324_fu_546_p1;
wire   [31:0] bitcast_ln18_fu_359_p1;
wire   [31:0] bitcast_ln28_fu_455_p1;
wire   [0:0] icmp_ln15_fu_288_p2;
wire   [5:0] add_ln14_fu_282_p2;
wire   [4:0] trunc_ln18_fu_310_p1;
wire   [5:0] select_ln14_fu_294_p3;
wire   [9:0] zext_ln18_fu_322_p1;
wire   [9:0] tmp_cast_fu_314_p3;
wire   [4:0] trunc_ln17_fu_332_p1;
wire   [9:0] add_ln_fu_336_p3;
wire   [0:0] icmp_ln25_fu_382_p2;
wire   [5:0] add_ln24_fu_376_p2;
wire   [4:0] trunc_ln28_fu_404_p1;
wire   [5:0] select_ln24_fu_388_p3;
wire   [9:0] zext_ln28_fu_416_p1;
wire   [9:0] tmp_73_cast_fu_408_p3;
wire   [4:0] trunc_ln27_fu_426_p1;
wire   [10:0] or_ln_fu_430_p4;
wire   [0:0] icmp_ln42_fu_478_p2;
wire   [5:0] add_ln41_fu_472_p2;
wire   [9:0] zext_ln45_fu_521_p1;
wire   [9:0] tmp_74_cast_fu_514_p3;
wire   [9:0] add_ln45_fu_524_p2;
wire   [9:0] add_ln1_fu_540_p3;
wire    ap_CS_fsm_state14;
reg   [9:0] ap_NS_fsm;
reg    ap_block_state8_on_subcall_done;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 grp_inversion_matrix_fu_253_ap_start_reg = 1'b0;
#0 grp_matrixmul_fu_258_ap_start_reg = 1'b0;
#0 grp_transMatrix_fu_265_ap_start_reg = 1'b0;
end

matrixmul_accel_core_inversion_matrix_Ainverse #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
mat_a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mat_a_address0),
    .ce0(mat_a_ce0),
    .we0(mat_a_we0),
    .d0(mat_a_d0),
    .q0(mat_a_q0),
    .address1(mat_a_address1),
    .ce1(mat_a_ce1),
    .we1(mat_a_we1),
    .d1(grp_inversion_matrix_fu_253_A_d1),
    .q1(mat_a_q1)
);

matrixmul_accel_core_inversion_matrix_Ainverse #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
mat_b_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mat_b_address0),
    .ce0(mat_b_ce0),
    .we0(mat_b_we0),
    .d0(mat_b_d0),
    .q0(mat_b_q0),
    .address1(mat_b_address1),
    .ce1(mat_b_ce1),
    .we1(mat_b_we1),
    .d1(grp_transMatrix_fu_265_mat_b_d1),
    .q1(mat_b_q1)
);

matrixmul_accel_core_mat_res #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
mat_res_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mat_res_address0),
    .ce0(mat_res_ce0),
    .we0(mat_res_we0),
    .d0(grp_matrixmul_fu_258_res_d0),
    .q0(mat_res_q0)
);

matrixmul_accel_core_inversion_matrix grp_inversion_matrix_fu_253(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_inversion_matrix_fu_253_ap_start),
    .ap_done(grp_inversion_matrix_fu_253_ap_done),
    .ap_idle(grp_inversion_matrix_fu_253_ap_idle),
    .ap_ready(grp_inversion_matrix_fu_253_ap_ready),
    .A_address0(grp_inversion_matrix_fu_253_A_address0),
    .A_ce0(grp_inversion_matrix_fu_253_A_ce0),
    .A_we0(grp_inversion_matrix_fu_253_A_we0),
    .A_d0(grp_inversion_matrix_fu_253_A_d0),
    .A_q0(mat_a_q0),
    .A_address1(grp_inversion_matrix_fu_253_A_address1),
    .A_ce1(grp_inversion_matrix_fu_253_A_ce1),
    .A_we1(grp_inversion_matrix_fu_253_A_we1),
    .A_d1(grp_inversion_matrix_fu_253_A_d1),
    .A_q1(mat_a_q1)
);

matrixmul_accel_core_matrixmul grp_matrixmul_fu_258(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrixmul_fu_258_ap_start),
    .ap_done(grp_matrixmul_fu_258_ap_done),
    .ap_idle(grp_matrixmul_fu_258_ap_idle),
    .ap_ready(grp_matrixmul_fu_258_ap_ready),
    .a_address0(grp_matrixmul_fu_258_a_address0),
    .a_ce0(grp_matrixmul_fu_258_a_ce0),
    .a_q0(mat_a_q0),
    .a_address1(grp_matrixmul_fu_258_a_address1),
    .a_ce1(grp_matrixmul_fu_258_a_ce1),
    .a_q1(mat_a_q1),
    .b_address0(grp_matrixmul_fu_258_b_address0),
    .b_ce0(grp_matrixmul_fu_258_b_ce0),
    .b_q0(mat_b_q0),
    .b_address1(grp_matrixmul_fu_258_b_address1),
    .b_ce1(grp_matrixmul_fu_258_b_ce1),
    .b_q1(mat_b_q1),
    .res_address0(grp_matrixmul_fu_258_res_address0),
    .res_ce0(grp_matrixmul_fu_258_res_ce0),
    .res_we0(grp_matrixmul_fu_258_res_we0),
    .res_d0(grp_matrixmul_fu_258_res_d0)
);

matrixmul_accel_core_transMatrix grp_transMatrix_fu_265(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_transMatrix_fu_265_ap_start),
    .ap_done(grp_transMatrix_fu_265_ap_done),
    .ap_idle(grp_transMatrix_fu_265_ap_idle),
    .ap_ready(grp_transMatrix_fu_265_ap_ready),
    .mat_b_address0(grp_transMatrix_fu_265_mat_b_address0),
    .mat_b_ce0(grp_transMatrix_fu_265_mat_b_ce0),
    .mat_b_we0(grp_transMatrix_fu_265_mat_b_we0),
    .mat_b_d0(grp_transMatrix_fu_265_mat_b_d0),
    .mat_b_q0(mat_b_q0),
    .mat_b_address1(grp_transMatrix_fu_265_mat_b_address1),
    .mat_b_ce1(grp_transMatrix_fu_265_mat_b_ce1),
    .mat_b_we1(grp_transMatrix_fu_265_mat_b_we1),
    .mat_b_d1(grp_transMatrix_fu_265_mat_b_d1),
    .mat_b_q1(mat_b_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((grp_matrixmul_fu_258_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state11)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((grp_matrixmul_fu_258_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_inversion_matrix_fu_253_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_inversion_matrix_fu_253_ap_start_reg <= 1'b1;
        end else if ((grp_inversion_matrix_fu_253_ap_ready == 1'b1)) begin
            grp_inversion_matrix_fu_253_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrixmul_fu_258_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_matrixmul_fu_258_ap_start_reg <= 1'b1;
        end else if ((grp_matrixmul_fu_258_ap_ready == 1'b1)) begin
            grp_matrixmul_fu_258_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_transMatrix_fu_265_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_transMatrix_fu_265_ap_start_reg <= 1'b1;
        end else if ((grp_transMatrix_fu_265_ap_ready == 1'b1)) begin
            grp_transMatrix_fu_265_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_198 <= 6'd0;
    end else if (((icmp_ln24_reg_580 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        i_1_reg_198 <= select_ln24_1_reg_589;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln41_reg_609 == 1'd0))) begin
        i_2_reg_231 <= select_ln41_1_reg_623;
    end else if (((grp_matrixmul_fu_258_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_2_reg_231 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_165 <= select_ln14_1_reg_560;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_165 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln41_fu_460_p2 == 1'd0))) begin
        indvar_flatten13_reg_220 <= add_ln41_1_fu_466_p2;
    end else if (((grp_matrixmul_fu_258_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        indvar_flatten13_reg_220 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten6_reg_187 <= 11'd0;
    end else if (((icmp_ln24_fu_364_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten6_reg_187 <= add_ln24_1_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_154 <= add_ln14_1_fu_276_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_154 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_30_reg_209 <= 6'd0;
    end else if (((icmp_ln24_fu_364_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_30_reg_209 <= add_ln25_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln41_fu_460_p2 == 1'd0))) begin
        j_31_reg_242 <= add_ln42_fu_508_p2;
    end else if (((grp_matrixmul_fu_258_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        j_31_reg_242 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_176 <= add_ln15_fu_349_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_176 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln18_reg_565 <= add_ln18_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_364_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln28_reg_594 <= add_ln28_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_551 <= icmp_ln14_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln24_reg_580 <= icmp_ln24_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln41_reg_609 <= icmp_ln41_fu_460_p2;
        icmp_ln41_reg_609_pp2_iter1_reg <= icmp_ln41_reg_609;
        trunc_ln45_reg_628_pp2_iter1_reg <= trunc_ln45_reg_628;
        trunc_ln46_reg_634_pp2_iter1_reg <= trunc_ln46_reg_634;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln14_1_reg_560 <= select_ln14_1_fu_302_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_364_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        select_ln24_1_reg_589 <= select_ln24_1_fu_396_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln41_fu_460_p2 == 1'd0))) begin
        select_ln41_1_reg_623 <= select_ln41_1_fu_492_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln41_fu_460_p2 == 1'd0))) begin
        select_ln41_reg_618 <= select_ln41_fu_484_p3;
        trunc_ln45_reg_628 <= trunc_ln45_fu_500_p1;
        trunc_ln46_reg_634 <= trunc_ln46_fu_504_p1;
    end
end

always @ (*) begin
    if ((icmp_ln14_fu_270_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln24_fu_364_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_460_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_580 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_i_1_phi_fu_202_p4 = select_ln24_1_reg_589;
    end else begin
        ap_phi_mux_i_1_phi_fu_202_p4 = i_1_reg_198;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln41_reg_609 == 1'd0))) begin
        ap_phi_mux_i_2_phi_fu_235_p4 = select_ln41_1_reg_623;
    end else begin
        ap_phi_mux_i_2_phi_fu_235_p4 = i_2_reg_231;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln14_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_169_p4 = select_ln14_1_reg_560;
    end else begin
        ap_phi_mux_i_phi_fu_169_p4 = i_reg_165;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        input_r_address0 = zext_ln538_1_fu_440_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln538_fu_344_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mat_a_address0 = zext_ln18_1_fu_355_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mat_a_address0 = grp_matrixmul_fu_258_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_a_address0 = grp_inversion_matrix_fu_253_A_address0;
    end else begin
        mat_a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mat_a_address1 = grp_matrixmul_fu_258_a_address1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_a_address1 = grp_inversion_matrix_fu_253_A_address1;
    end else begin
        mat_a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mat_a_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mat_a_ce0 = grp_matrixmul_fu_258_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_a_ce0 = grp_inversion_matrix_fu_253_A_ce0;
    end else begin
        mat_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mat_a_ce1 = grp_matrixmul_fu_258_a_ce1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_a_ce1 = grp_inversion_matrix_fu_253_A_ce1;
    end else begin
        mat_a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mat_a_d0 = bitcast_ln18_fu_359_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_a_d0 = grp_inversion_matrix_fu_253_A_d0;
    end else begin
        mat_a_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mat_a_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_a_we0 = grp_inversion_matrix_fu_253_A_we0;
    end else begin
        mat_a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_a_we1 = grp_inversion_matrix_fu_253_A_we1;
    end else begin
        mat_a_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        mat_b_address0 = zext_ln28_1_fu_451_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_b_address0 = grp_transMatrix_fu_265_mat_b_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mat_b_address0 = grp_matrixmul_fu_258_b_address0;
    end else begin
        mat_b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_b_address1 = grp_transMatrix_fu_265_mat_b_address1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mat_b_address1 = grp_matrixmul_fu_258_b_address1;
    end else begin
        mat_b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        mat_b_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_b_ce0 = grp_transMatrix_fu_265_mat_b_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mat_b_ce0 = grp_matrixmul_fu_258_b_ce0;
    end else begin
        mat_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_b_ce1 = grp_transMatrix_fu_265_mat_b_ce1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mat_b_ce1 = grp_matrixmul_fu_258_b_ce1;
    end else begin
        mat_b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        mat_b_d0 = bitcast_ln28_fu_455_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_b_d0 = grp_transMatrix_fu_265_mat_b_d0;
    end else begin
        mat_b_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_580 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        mat_b_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_b_we0 = grp_transMatrix_fu_265_mat_b_we0;
    end else begin
        mat_b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mat_b_we1 = grp_transMatrix_fu_265_mat_b_we1;
    end else begin
        mat_b_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mat_res_address0 = zext_ln45_1_fu_530_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mat_res_address0 = grp_matrixmul_fu_258_res_address0;
    end else begin
        mat_res_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mat_res_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mat_res_ce0 = grp_matrixmul_fu_258_res_ce0;
    end else begin
        mat_res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mat_res_we0 = grp_matrixmul_fu_258_res_we0;
    end else begin
        mat_res_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln41_reg_609_pp2_iter1_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln14_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln14_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln24_fu_364_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln24_fu_364_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_matrixmul_fu_258_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln41_fu_460_p2 == 1'd1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln41_fu_460_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_1_fu_276_p2 = (indvar_flatten_reg_154 + 11'd1);

assign add_ln14_fu_282_p2 = (6'd1 + ap_phi_mux_i_phi_fu_169_p4);

assign add_ln15_fu_349_p2 = (6'd1 + select_ln14_fu_294_p3);

assign add_ln18_fu_326_p2 = (zext_ln18_fu_322_p1 + tmp_cast_fu_314_p3);

assign add_ln1_fu_540_p3 = {{trunc_ln45_reg_628_pp2_iter1_reg}, {trunc_ln46_reg_634_pp2_iter1_reg}};

assign add_ln24_1_fu_370_p2 = (indvar_flatten6_reg_187 + 11'd1);

assign add_ln24_fu_376_p2 = (6'd1 + ap_phi_mux_i_1_phi_fu_202_p4);

assign add_ln25_fu_445_p2 = (6'd1 + select_ln24_fu_388_p3);

assign add_ln28_fu_420_p2 = (zext_ln28_fu_416_p1 + tmp_73_cast_fu_408_p3);

assign add_ln41_1_fu_466_p2 = (indvar_flatten13_reg_220 + 11'd1);

assign add_ln41_fu_472_p2 = (6'd1 + ap_phi_mux_i_2_phi_fu_235_p4);

assign add_ln42_fu_508_p2 = (6'd1 + select_ln41_fu_484_p3);

assign add_ln45_fu_524_p2 = (zext_ln45_fu_521_p1 + tmp_74_cast_fu_514_p3);

assign add_ln_fu_336_p3 = {{trunc_ln18_fu_310_p1}, {trunc_ln17_fu_332_p1}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_on_subcall_done = ((grp_transMatrix_fu_265_ap_done == 1'b0) | (grp_inversion_matrix_fu_253_ap_done == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign bitcast_ln18_fu_359_p1 = input_r_q0;

assign bitcast_ln28_fu_455_p1 = input_r_q0;

assign grp_inversion_matrix_fu_253_ap_start = grp_inversion_matrix_fu_253_ap_start_reg;

assign grp_matrixmul_fu_258_ap_start = grp_matrixmul_fu_258_ap_start_reg;

assign grp_transMatrix_fu_265_ap_start = grp_transMatrix_fu_265_ap_start_reg;

assign icmp_ln14_fu_270_p2 = ((indvar_flatten_reg_154 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_288_p2 = ((j_reg_176 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_364_p2 = ((indvar_flatten6_reg_187 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_382_p2 = ((j_30_reg_209 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_460_p2 = ((indvar_flatten13_reg_220 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_478_p2 = ((j_31_reg_242 == 6'd32) ? 1'b1 : 1'b0);

assign or_ln_fu_430_p4 = {{{{1'd1}, {trunc_ln28_fu_404_p1}}}, {trunc_ln27_fu_426_p1}};

assign output_r_address0 = zext_ln324_fu_546_p1;

assign output_r_d0 = mat_res_q0;

assign select_ln14_1_fu_302_p3 = ((icmp_ln15_fu_288_p2[0:0] === 1'b1) ? add_ln14_fu_282_p2 : ap_phi_mux_i_phi_fu_169_p4);

assign select_ln14_fu_294_p3 = ((icmp_ln15_fu_288_p2[0:0] === 1'b1) ? 6'd0 : j_reg_176);

assign select_ln24_1_fu_396_p3 = ((icmp_ln25_fu_382_p2[0:0] === 1'b1) ? add_ln24_fu_376_p2 : ap_phi_mux_i_1_phi_fu_202_p4);

assign select_ln24_fu_388_p3 = ((icmp_ln25_fu_382_p2[0:0] === 1'b1) ? 6'd0 : j_30_reg_209);

assign select_ln41_1_fu_492_p3 = ((icmp_ln42_fu_478_p2[0:0] === 1'b1) ? add_ln41_fu_472_p2 : ap_phi_mux_i_2_phi_fu_235_p4);

assign select_ln41_fu_484_p3 = ((icmp_ln42_fu_478_p2[0:0] === 1'b1) ? 6'd0 : j_31_reg_242);

assign tmp_73_cast_fu_408_p3 = {{trunc_ln28_fu_404_p1}, {5'd0}};

assign tmp_74_cast_fu_514_p3 = {{trunc_ln45_reg_628}, {5'd0}};

assign tmp_cast_fu_314_p3 = {{trunc_ln18_fu_310_p1}, {5'd0}};

assign trunc_ln17_fu_332_p1 = select_ln14_fu_294_p3[4:0];

assign trunc_ln18_fu_310_p1 = select_ln14_1_fu_302_p3[4:0];

assign trunc_ln27_fu_426_p1 = select_ln24_fu_388_p3[4:0];

assign trunc_ln28_fu_404_p1 = select_ln24_1_fu_396_p3[4:0];

assign trunc_ln45_fu_500_p1 = select_ln41_1_fu_492_p3[4:0];

assign trunc_ln46_fu_504_p1 = select_ln41_fu_484_p3[4:0];

assign zext_ln18_1_fu_355_p1 = add_ln18_reg_565;

assign zext_ln18_fu_322_p1 = select_ln14_fu_294_p3;

assign zext_ln28_1_fu_451_p1 = add_ln28_reg_594;

assign zext_ln28_fu_416_p1 = select_ln24_fu_388_p3;

assign zext_ln324_fu_546_p1 = add_ln1_fu_540_p3;

assign zext_ln45_1_fu_530_p1 = add_ln45_fu_524_p2;

assign zext_ln45_fu_521_p1 = select_ln41_reg_618;

assign zext_ln538_1_fu_440_p1 = or_ln_fu_430_p4;

assign zext_ln538_fu_344_p1 = add_ln_fu_336_p3;

endmodule //matrixmul_accel_core
